<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.lmig.forge.stash.ssh</groupId>
	<artifactId>stash-ssh-key-enforcer</artifactId>
	<version>2.0-SNAPSHOT</version>
	<organization>
		<name>Liberty Mutual Insurance</name>
		<url>https://libertymutual.com/</url>
	</organization>
	<name>SSH Key Enforcer for Bitbucket Server</name>
	<packaging>atlassian-plugin</packaging>
	<scm>
		<connection>scm:git:git@github.com:Libertymutual/ssh-key-enforcer-stash.git</connection>
	</scm>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.atlassian.bitbucket.server</groupId>
				<artifactId>bitbucket-parent</artifactId>
				<version>${bitbucket.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>com.atlassian.sal</groupId>
			<artifactId>sal-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.atlassian.bitbucket.server</groupId>
			<artifactId>bitbucket-api</artifactId>
			<scope>provided</scope>
		</dependency>
        <dependency>
            <groupId>com.atlassian.bitbucket.server</groupId>
            <artifactId>bitbucket-ssh</artifactId>
            <scope>provided</scope>
        </dependency>
		<dependency>
			<groupId>com.atlassian.scheduler</groupId>
			<artifactId>atlassian-scheduler-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.atlassian.soy</groupId>
			<artifactId>soy-template-renderer-api</artifactId>
			<version>1.1.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.atlassian.bitbucket.server</groupId>
			<artifactId>bitbucket-spi</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.atlassian.bitbucket.server</groupId>
			<artifactId>bitbucket-page-objects</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>
		<dependency>
			<groupId>com.atlassian.activeobjects</groupId>
			<artifactId>activeobjects-plugin</artifactId>
			<version>${ao.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>net.java.dev.activeobjects</groupId>
			<artifactId>activeobjects-test</artifactId>
			<version>${ao.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.atlassian.activeobjects</groupId>
			<artifactId>activeobjects-test</artifactId>
			<version>${ao.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>2.3.3</version>
		</dependency>
		<dependency>
			<groupId>com.jcraft</groupId>
			<artifactId>jsch</artifactId>
			<version>0.1.53</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>jsr311-api</artifactId>
			<version>1.1.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.2.2-atlassian-1</version>
		</dependency>

		<dependency>
			<groupId>com.google.collections</groupId>
			<artifactId>google-collections</artifactId>
			<version>1.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.6</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.atlassian.plugins</groupId>
			<artifactId>atlassian-plugins-osgi-testrunner</artifactId>
			<version>${plugin.testrunner.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.1.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.atlassian.plugins.rest</groupId>
			<artifactId>atlassian-rest-common</artifactId>
			<version>1.0.2</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.wink</groupId>
			<artifactId>wink-client</artifactId>
			<version>1.1.3-incubating</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>com.atlassian.maven.plugins</groupId>
				<artifactId>bitbucket-maven-plugin</artifactId>
				<version>${amps.version}</version>
				<extensions>true</extensions>
				<configuration>
                    <allowGoogleTracking>false</allowGoogleTracking>
					<server>localhost</server>
					<!-- run DC cluster using 'atlas-run \-\-testGroup clusterTestGroup' -->
                    <!-- you will also need to download mysql driver and place in /home/lib for *all* nodes in cluster. See bitbucket.shared.home values for each node below -->
					<!-- see https://developer.atlassian.com/stash/docs/latest/how-tos/cluster-safe-plugins.html -->
                    <!-- the file runClustered.sh aggregates some manipulations needed to make it easier, but starting a clister is sloooow -->
					<products>
                        <!-- standalone non-clustered w/ in-memory db -->
                        <product>
                            <id>bitbucket</id>
                            <instanceId>bitbucket</instanceId>
                            <version>${bitbucket.version}</version>
                            <dataVersion>${bitbucket.data.version}</dataVersion>
                        </product>
						<!-- node 1 for clustered -->
						<product>
							<id>bitbucket</id>
							<instanceId>bitbucket-node-1</instanceId>
							<version>${bitbucket.version}</version>
							<dataVersion>${bitbucket.data.version}</dataVersion>
							<systemPropertyVariables>
								<bitbucket.shared.home>${project.basedir}/target/bitbucket-node-1/home/shared</bitbucket.shared.home>
                                <!-- override the SSH port used for this node -->
                                <bitbucket.plugin.ssh.port>7997</bitbucket.plugin.ssh.port>
								<!-- override database settings so both nodes use a single database -->
								<jdbc.driver>com.mysql.jdbc.Driver</jdbc.driver>
								<jdbc.url>jdbc:mysql://10.187.116.253:3306/cf_355c208f_d6d1_4f9b_b8c9_538453c89ec7?characterEncoding=utf8&amp;useUnicode=true&amp;sessionVariables=storage_engine%3DInnoDB</jdbc.url>
								<jdbc.user>TcVfaZp8iohxwHMg</jdbc.user>
								<jdbc.password>1vpJLjjMaoLVvozA</jdbc.password>
								<!-- allow cluster nodes to find each other over TCP/IP thus enabling clustering for this node -->
								<hazelcast.network.tcpip>true</hazelcast.network.tcpip>
								<!-- set to true if your load balancer supports stick sessions -->
								<hazelcast.http.stickysessions>false</hazelcast.http.stickysessions>
								<!-- forces Stash to fully finish starting up before yielding to the func test runner or atlas-run -->
								<johnson.spring.lifecycle.synchronousStartup>true</johnson.spring.lifecycle.synchronousStartup>
							</systemPropertyVariables>
                            <libArtifacts>
                                <!-- ensure MySQL drivers are available to Stash -->
                                <libArtifact>
                                    <groupId>mysql</groupId>
                                    <artifactId>mysql-connector-java</artifactId>
                                    <version>5.1.32</version>
                                </libArtifact>
                            </libArtifacts>
						</product>
						<!-- Node 2 -->
						<product>
							<id>bitbucket</id>
							<instanceId>bitbucket-node-2</instanceId>
							<version>${bitbucket.version}</version>
							<dataVersion>${bitbucket.data.version}</dataVersion>
							<!-- override the HTTP port used for this node -->
							<httpPort>7992</httpPort>
							<systemPropertyVariables>
								<bitbucket.shared.home>${project.basedir}/target/bitbucket-node-1/home/shared</bitbucket.shared.home>
								<!-- override the SSH port used for this node -->
								<bitbucket.plugin.ssh.port>7998</bitbucket.plugin.ssh.port>
								<!-- override database settings so both nodes use a single database -->
								<jdbc.driver>com.mysql.jdbc.Driver</jdbc.driver>
								<jdbc.url>jdbc:mysql://10.187.116.253:3306/cf_355c208f_d6d1_4f9b_b8c9_538453c89ec7?characterEncoding=utf8&amp;useUnicode=true&amp;sessionVariables=storage_engine%3DInnoDB</jdbc.url>
								<jdbc.user>TcVfaZp8iohxwHMg</jdbc.user>
								<jdbc.password>1vpJLjjMaoLVvozA</jdbc.password>
								<!-- allow cluster nodes to find each other over TCP/IP thus enabling clustering for this node -->
								<hazelcast.network.tcpip>true</hazelcast.network.tcpip>
								<!-- set to true if your load balancer supports stick sessions -->
								<hazelcast.http.stickysessions>false</hazelcast.http.stickysessions>
								<!-- forces Stash to fully finish starting up before yielding to the func test runner or atlas-run -->
								<johnson.spring.lifecycle.synchronousStartup>true</johnson.spring.lifecycle.synchronousStartup>
							</systemPropertyVariables>
							<libArtifacts>
								<!-- ensure MySQL drivers are available to Stash -->
								<libArtifact>
									<groupId>mysql</groupId>
									<artifactId>mysql-connector-java</artifactId>
									<version>5.1.32</version>
								</libArtifact>
							</libArtifacts>
						</product>
					</products>
					<!-- <log4jProperties>src/main/resources/log4j.properties</log4jProperties> -->
					<testGroups>
						<!-- tell AMPS / Maven which products ie nodes to run for the named testGroup 'clusterTestGroup' -->
						<testGroup>
							<id>clusterTestGroup</id>
							<productIds>
								<productId>bitbucket-node-1</productId>
								<productId>bitbucket-node-2</productId>
							</productIds>
						</testGroup>
					</testGroups>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.4.1</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<createDependencyReducedPom>false</createDependencyReducedPom>
							<relocations>
								<relocation>
									<pattern>com.jcraft.jsch</pattern>
									<shadedPattern>com.shaded.jcraft.jsch</shadedPattern>
								</relocation>
							</relocations>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<properties>
		<bitbucket.version>4.10.2</bitbucket.version>
		<bitbucket.ssh.version>4.10.2</bitbucket.ssh.version>
		<bitbucket.data.version>4.10.2</bitbucket.data.version>
		<amps.version>6.1.0</amps.version>
		<plugin.testrunner.version>2.0.0</plugin.testrunner.version>
		<ao.version>1.2.0</ao.version>
	</properties>
	<url>https://developer.libertymutual.com</url>
	<description>This plugin enables enterprise level SSH Key management over the default access provided in Bitbucket.</description>
</project>
